data Option<a> = None | Some(a)

data Repository = Repository[l](Int'local, Int'l)

-- (f: (b)' -> c, g: (a)' -> b) -> (x: a)'f+g -> c
let compose = fun
    [l1, l2, l3, l4, l5]
    <a <: Any'l1, b <: Any'l2, c <: Any'l3>
    (f: (b)'l4 -> c, g: (a)'l5 -> b)
    fun(x : a) f(g(x))

let id = fun<a <: Any'local>(x: a) x

let f = fun(y: Int) fun(x: Int) y

let r = Some<Int>(1)

let m = match Some<(Int) -> Int>(fun(x: Int) x) {
    case None() -> 1
    case Some(f) -> f(42)
}

effect Reader<e> {
    op ask(): e
}

let reader =
    handle r: Reader<Int>'local {
        op ask() 42
    }
    perform ask() to r
